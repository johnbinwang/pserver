// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include <iostream>

#include "PdfConverter.h"
#include "ConvertService.cpp"

#include <config.h>
#include <protocol/TBinaryProtocol.h>
#include <protocol/TCompactProtocol.h>
#include <server/TSimpleServer.h>
#include <server/TThreadedServer.h>
#include <server/TNonblockingServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <concurrency/ThreadManager.h>
#include <concurrency/PosixThreadFactory.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;
using namespace std;

using boost::shared_ptr;

class PdfConverterHandler : virtual public PdfConverterIf {
 public:
  PdfConverterHandler() {

  }
  void convert(PdfJobResult& _return, const PdfJob& job) {
	ConvertService convertService;
	convertService.convert(_return,job);
  }

};

int main(int argc, char **argv) {
  int port = 8101;
  boost::shared_ptr<PdfConverterHandler> handler(new PdfConverterHandler());
  boost::shared_ptr<TProcessor> processor(new PdfConverterProcessor(handler));
  boost::shared_ptr<TProtocolFactory> protocolFactory(new TCompactProtocolFactory());
  boost::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(15);
  boost::shared_ptr<PosixThreadFactory> threadFactory = boost::shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start();
  TNonblockingServer server(processor, protocolFactory, port, threadManager);
  server.serve();
  cout << "server is running" << endl;
  return 0;
}

