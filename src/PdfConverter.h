/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef PdfConverter_H
#define PdfConverter_H

#include <TProcessor.h>
#include "PdfConverter_types.h"



class PdfConverterIf {
 public:
  virtual ~PdfConverterIf() {}
  virtual void convert(PdfJobResult& _return, const PdfJob& job) = 0;
};

class PdfConverterNull : virtual public PdfConverterIf {
 public:
  virtual ~PdfConverterNull() {}
  void convert(PdfJobResult& /* _return */, const PdfJob& /* job */) {
    return;
  }
};

typedef struct _PdfConverter_convert_args__isset {
  _PdfConverter_convert_args__isset() : job(false) {}
  bool job;
} _PdfConverter_convert_args__isset;

class PdfConverter_convert_args {
 public:

  PdfConverter_convert_args() {
  }

  virtual ~PdfConverter_convert_args() throw() {}

  PdfJob job;

  _PdfConverter_convert_args__isset __isset;

  bool operator == (const PdfConverter_convert_args & rhs) const
  {
    if (!(job == rhs.job))
      return false;
    return true;
  }
  bool operator != (const PdfConverter_convert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PdfConverter_convert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PdfConverter_convert_pargs {
 public:


  virtual ~PdfConverter_convert_pargs() throw() {}

  const PdfJob* job;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PdfConverter_convert_result__isset {
  _PdfConverter_convert_result__isset() : success(false) {}
  bool success;
} _PdfConverter_convert_result__isset;

class PdfConverter_convert_result {
 public:

  PdfConverter_convert_result() {
  }

  virtual ~PdfConverter_convert_result() throw() {}

  PdfJobResult success;

  _PdfConverter_convert_result__isset __isset;

  bool operator == (const PdfConverter_convert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PdfConverter_convert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PdfConverter_convert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PdfConverter_convert_presult__isset {
  _PdfConverter_convert_presult__isset() : success(false) {}
  bool success;
} _PdfConverter_convert_presult__isset;

class PdfConverter_convert_presult {
 public:


  virtual ~PdfConverter_convert_presult() throw() {}

  PdfJobResult* success;

  _PdfConverter_convert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PdfConverterClient : virtual public PdfConverterIf {
 public:
  PdfConverterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PdfConverterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void convert(PdfJobResult& _return, const PdfJob& job);
  void send_convert(const PdfJob& job);
  void recv_convert(PdfJobResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PdfConverterProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<PdfConverterIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (PdfConverterProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_convert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PdfConverterProcessor(boost::shared_ptr<PdfConverterIf> iface) :
    iface_(iface) {
    processMap_["convert"] = &PdfConverterProcessor::process_convert;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~PdfConverterProcessor() {}
};

class PdfConverterMultiface : virtual public PdfConverterIf {
 public:
  PdfConverterMultiface(std::vector<boost::shared_ptr<PdfConverterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PdfConverterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PdfConverterIf> > ifaces_;
  PdfConverterMultiface() {}
  void add(boost::shared_ptr<PdfConverterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void convert(PdfJobResult& _return, const PdfJob& job) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->convert(_return, job);
        return;
      } else {
        ifaces_[i]->convert(_return, job);
      }
    }
  }

};



#endif
